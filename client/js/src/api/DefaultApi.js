/**
 * uuid farm
 * A farm for abandoned UUIDs
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import Farm from '../model/Farm';
import Uuid from '../model/Uuid';

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adoptUUID operation.
     * @callback module:api/DefaultApi~adoptUUIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adopt UUID
     * Adopt a previously surrendered, not yet adopted, uuid at random.
     * @param {module:api/DefaultApi~adoptUUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uuid}
     */
    adoptUUID(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Uuid;
      return this.apiClient.callApi(
        '/uuids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFarm operation.
     * @callback module:api/DefaultApi~getFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Farm Stats
     * Returns farm statistics.
     * @param {module:api/DefaultApi~getFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    getFarm(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUUID operation.
     * @callback module:api/DefaultApi~getUUIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UUID
     * Returns information on a uuid by its id. Rejects invalid and not found uuids.
     * @param {String} id uuid
     * @param {module:api/DefaultApi~getUUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uuid}
     */
    getUUID(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUUID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Uuid;
      return this.apiClient.callApi(
        '/uuids/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUUIDs operation.
     * @callback module:api/DefaultApi~getUUIDsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Uuid>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UUIDs
     * Returns all uuids.
     * @param {module:api/DefaultApi~getUUIDsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Uuid>}
     */
    getUUIDs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Uuid];
      return this.apiClient.callApi(
        '/uuids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the surrenderUUID operation.
     * @callback module:api/DefaultApi~surrenderUUIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Surrender UUID
     * Adds a new uuid to the farm to become available for adoption. Rejects invalid or duplicate uuids.
     * @param {String} id uuid
     * @param {module:api/DefaultApi~surrenderUUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uuid}
     */
    surrenderUUID(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling surrenderUUID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Uuid;
      return this.apiClient.callApi(
        '/uuids/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUUID operation.
     * @callback module:api/DefaultApi~updateUUIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uuid} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update UUID
     * Update uuid metadata. Rejects invalid or not found uuids.
     * @param {String} id uuid
     * @param {Object} opts Optional parameters
     * @param {module:model/Uuid} opts.uuid uuid
     * @param {module:api/DefaultApi~updateUUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uuid}
     */
    updateUUID(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['uuid'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUUID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Uuid;
      return this.apiClient.callApi(
        '/uuids/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
