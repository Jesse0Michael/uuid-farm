/*
 * uuid farm
 *
 * A farm for abandoned UUIDs
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package uuids

import (
	"context"
	"errors"
	"log"
	"math/rand"
	"time"

	"cloud.google.com/go/firestore"
	"google.golang.org/api/iterator"
)

const (
	collection = "uuids"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	client *firestore.Client
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(client *firestore.Client) DefaultApiServicer {
	return &DefaultApiService{
		client: client,
	}
}

// AdoptUUID - Adopt a previously surrendered, not yet adopted, uuid at random.
func (s *DefaultApiService) AdoptUUID() (interface{}, error) {
	docs, err := s.client.Collection(collection).Where("AdoptionDate", "==", "").Limit(25).Documents(context.Background()).GetAll()
	if err != nil {
		log.Printf("failed to get uuids %s: %s", collection, err)
		return nil, err
	}

	if len(docs) == 0 {
		log.Printf("failed to get adoptable uuid in %s: %s", collection, err)
		return nil, errors.New("No UUIDs available")
	}

	var uuid Uuid
	if err = docs[rand.Intn(len(docs))].DataTo(&uuid); err != nil {
		return nil, err
	}
	uuid.AdoptionDate = time.Now().UTC().String()

	return s.UpdateUUID(uuid.Id, uuid)
}

// GetFarm - Returns farm statistics.
func (s *DefaultApiService) GetFarm() (interface{}, error) {
	var farm Farm
	docs := s.client.Collection(collection).Documents(context.Background())
	for {
		doc, err := docs.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			log.Printf("failed to get next %s: %s", collection, err)
			return nil, err
		}

		adopted := doc.Data()["AdoptionDate"]
		if adopted == "" {
			farm.Surrendered++
		} else {
			farm.Adopted++
		}
		farm.Uuids++
	}

	return farm, nil
}

// GetUUID - Returns information on a uuid by its id. Rejects invalid and not found uuids.
func (s *DefaultApiService) GetUUID(id string) (interface{}, error) {
	doc, err := s.client.Collection(collection).Doc(id).Get(context.Background())
	if err != nil {
		log.Printf("failed to get uuid %s: %s", id, err.Error())
		return nil, err
	}

	var uuid Uuid
	err = doc.DataTo(&uuid)
	return uuid, err
}

// GetUUIDs - Returns all uuids.
func (s *DefaultApiService) GetUUIDs() (interface{}, error) {
	var uuids []*Uuid
	docs := s.client.Collection(collection).DocumentRefs(context.Background())
	for {
		doc, err := docs.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			log.Printf("failed to get next %s: %s", collection, err)
			return nil, err
		}

		d, err := doc.Get(context.Background())
		if err != nil {
			return nil, errors.New("failed to get uuid")
		}

		var uuid Uuid
		if err := d.DataTo(&uuid); err != nil {
			return nil, err
		}
		uuids = append(uuids, &uuid)
	}

	return uuids, nil
}

// SurrenderUUID - Adds a new uuid to the farm to become available for adoption. Rejects invalid or duplicate uuids.
func (s *DefaultApiService) SurrenderUUID(id string) (interface{}, error) {
	uuid := Uuid{Id: id, SurrenderDate: time.Now().UTC().String()}
	_, err := s.client.Collection(collection).Doc(id).Create(context.Background(), uuid)
	if err != nil {
		log.Printf("failed to surrender uuid %s: %s", id, err.Error())
		return nil, err
	}

	return uuid, nil
}

// UpdateUUID - Update uuid metadata. Rejects invalid or not found uuids.
func (s *DefaultApiService) UpdateUUID(id string, uuid Uuid) (interface{}, error) {
	var updates []firestore.Update
	if uuid.Name != "" {
		updates = append(updates, firestore.Update{Path: "Name", Value: uuid.Name})
	}

	if uuid.AdoptionDate != "" {
		updates = append(updates, firestore.Update{Path: "AdoptionDate", Value: uuid.AdoptionDate})
	}

	if len(updates) > 0 {
		_, err := s.client.Collection(collection).Doc(id).Update(context.Background(), updates)
		if err != nil {
			log.Printf("failed to update uuid %s: %s", id, err.Error())
			return nil, err
		}
	}

	return s.GetUUID(id)
}
