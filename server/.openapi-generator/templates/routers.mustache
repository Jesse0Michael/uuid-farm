{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

type RouteBinder interface { {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
	{{operationId}}(http.ResponseWriter, *http.Request){{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

func NewRouter(binder RouteBinder) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes(binder) {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func routes(binder RouteBinder) Routes {
	return Routes{ {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
		{
			"{{operationId}}",
			strings.ToUpper("{{httpMethod}}"),
			"{{{basePathWithoutHost}}}{{{path}}}",
			binder.{{operationId}},
		},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
	}
}

func EncodeJSONResponse(i interface{}, status *int, w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if status != nil {
		w.WriteHeader(*status)
	} else {
		w.WriteHeader(http.StatusOK)
	}

	return json.NewEncoder(w).Encode(i)
}
