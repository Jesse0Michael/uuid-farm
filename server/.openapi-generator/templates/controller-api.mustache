{{>partial_header}}
package {{packageName}}

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
)

type Controller struct {
    service Servicer
}

func NewController(s *Servicer) RouteBinder {
    return &Controller{}
}

type Servicer interface { {{#operations}}{{#operation}}
    {{operationId}}({{#allParams}}{{dataType}}{{^last}}, {{/last}}{{/allParams}}) (interface{}, error){{/operation}}{{/operations}}
}

// move to separate file
type APIService struct {
}

func NewAPIService() Servicer {
    return &APIService{}
}{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
func (s *APIService) {{nickname}}({{#allParams}}{{paramName}} {{dataType}}{{^last}}, {{/last}}{{/allParams}}) (interface{}, error) {
    return nil, nil
}{{/operation}}{{/operations}}
// -------{{#operations}}{{#operation}}

// {{nickname}} - {{{summary}}}
func (c *Controller) {{nickname}}(w http.ResponseWriter, r *http.Request) { {{#hasPathParams}}
    params := mux.Vars(r){{/hasPathParams}}{{#hasQueryParams}}
    query := r.URL.Query(){{/hasQueryParams}}
    {{#allParams}}{{#isPathParam}}{{paramName}} := params["{{paramName}}"]{{/isPathParam}}
    {{#isQueryParam}}{{paramName}} := query.Get("{{paramName}}"){{/isQueryParam}}
    {{#isBodyParam}}{{paramName}} := &{{dataType}}{}
    if err := json.NewDecoder(r.Body).Decode(&{{paramName}}); err != nil {
        w.WriteHeader(500)
        return
    }{{/isBodyParam}}
    {{/allParams}}
    result, err := c.service.{{nickname}}({{#allParams}}{{paramName}}{{^last}}, {{/last}}{{/allParams}})
    if err != nil {
        w.WriteHeader(500)
        return
    }
	
    EncodeJSONResponse(result, nil,  w)
}{{/operation}}{{/operations}}
